<Separator@Widget>:    size_hint: (1, None)    height: dp(5)    canvas:        Color:            rgba: 200, 200, 200, .3        Line:            points: self.x + .05*self.width, self.top, self.x + .95*self.width, self.top            width: dp(.6)            cap: 'round'            <SwitchBlock>:    active: switch.active    size_hint: (1, None)    Label:        size_hint: (.65, 1)        pos_hint: {'x': .05, 'center_y': .5}        text_size: self.size        font_size: app.FONT_SIZE        halign: 'left'        valign: 'center'        text: root.title    Switch:        id: switch        size_hint: (.25, None)        pos_hint: {'right': .95, 'center_y': .5}        active: root.active            <SliderBlock>:    value: int(slider.value)    step: 1    min: 0    max: 255    size_hint: (1, None)    Label:        id: title        size_hint: (None, None)        size: self.texture_size        pos_hint: {'x': .02, 'top': 1}        font_size: app.FONT_SIZE        text: root.title        halign: 'center'        valign: 'center'        font_name: app.FONT    Slider:        id: slider        disabled: root.disabled        size_hint: (.85, None)        height: 1.5*title.height        pos_hint: {'x': .0}        top: title.y        min: root.min        max: root.max        value: root.value        step: root.step    Label:        size_hint: (None, None)        size: self.texture_size        y: slider.y + (slider.height - self.height)//2        x: slider.right        font_size: app.FONT_SIZE        text: str(root.value)        halign: 'left'        valign: 'center'<ToggleBlock>:    size_hint: (1, None)    button_layout: button_layout    Label:        id: title        size_hint: (None, None)        size: self.texture_size        pos_hint: {'x': .02, 'top': 1}        font_size: app.FONT_SIZE        text: root.title        halign: 'center'        valign: 'center'        font_name: app.FONT    BoxLayout:        id: button_layout        orientation: 'horizontal'        size_hint: (None, None)        height: 1.5*app.FONT_SIZE        pos_hint: {'center_x': .5}        y: title.y - self.height            <RoundedToggleButton>:    background_normal: .2, .2, .2, 1    background_down: .3, .3, .3, 1    radius: dp(5)    font_color: 1, 1, 1, 1    size_hint: (None, None)    width: 1.5*self.texture_size[0]    height: 1.5*self.texture_size[1]    font_size: app.FONT_SIZE    allow_no_selection: False    canvas.before:        Color:            rgba: self.background_normal if self.state == 'normal' else self.background_down        RoundedRectangle:            pos: self.x, self.y            size: self.width, self.height            radius: [(self.radius, self.radius) for _ in range(4)]            <RoundedButton>:    background_normal: .2, .2, .2, 1    background_down: .3, .3, .3, 1    radius: dp(5)    font_color: 1, 1, 1, 1    size_hint: (None, None)    width: 1.5*self.texture_size[0]    height: 1.5*self.texture_size[1]    font_size: app.FONT_SIZE    canvas.before:        Color:            rgba: self.background_normal if self.state == 'normal' else self.background_down        RoundedRectangle:            pos: self.x, self.y            size: self.width, self.height            radius: [(self.radius, self.radius) for _ in range(4)]