<ScreenTemplate>:    canvas.before:        Color:            rgba: .4, .4, .4, 1        Rectangle:            size: self.size            pos: self.pos            <MainScreen>:    on_enter: app.root.kivycam.default_settings()    ScrollView:        id: scrollview        do_scroll_x: False        bar_width: self.width/40        StackLayout:            orientation: 'lr-tb'            size_hint: (1, None)            height: self.minimum_height            spacing: scrollview.height/60            padding: scrollview.height/24            Button:                size_hint: (1, None)                height: scrollview.height/4                text: "Canny Edge Detection"                on_release: root.manager.change_screen(name="canny_screen", transition="left")            Button:                size_hint: (1, None)                height: scrollview.height/4                text: "Threshold (Binary)"                on_release: root.manager.change_screen(name="binary_thresh_screen", transition="left")            Button:                size_hint: (1, None)                height: scrollview.height/4                text: "Threshold (Adaptive)"                on_release: root.manager.change_screen(name="adap_thresh_screen", transition="left")            Button:                size_hint: (1, None)                height: scrollview.height/4                text: "Blur"                on_release: root.manager.change_screen(name="blur_screen", transition="left")            Button:                size_hint: (1, None)                height: scrollview.height/4                text: "Optical Flow"                on_release: root.manager.change_screen(name="optical_flow_screen", transition="left")            Button:                size_hint: (1, None)                height: dp(30)                text: "Convolution"                on_release: root.manager.change_screen(name="convolution_screen", transition="left")<CannyScreen>:    threshold1: threshold1.value    threshold2: threshold2.value    on_threshold1:        app.root.kivycam.settings['Canny']['th1'] = self.threshold1    on_threshold2:        app.root.kivycam.settings['Canny']['th2'] = self.threshold2    Header:        id: header        title: "Canny Edge Detection"    ScrollView:        id: scrollview        do_scroll_x: False        bar_width: self.width/40        size_hint: (1, None)        height: root.height - header.height        pos_hint: {'center_x': .5, 'y': 0}        StackLayout:            orientation: 'lr-tb'            size_hint: (1, None)            pos_hint: {'center_x': .5}            top: header.y            height: self.minimum_height            SliderBlock:                id: threshold1                title: "THRESHOLD1"                value: root.threshold1            Separator:            SliderBlock:                id: threshold2                title: "THRESHOLD2"                value: root.threshold2            <ThresholdScreen>:    threshold: threshold.value    otsu_enabled: True if otsu_threshold.state == 'down' else False    on_threshold:        app.root.kivycam.settings["Threshold"]["threshold"] = self.threshold    on_otsu_enabled:        app.root.kivycam.settings["Threshold"]["otsu"] = self.otsu_enabled    Header:        id: header        title: "Binary Threshold"    ScrollView:        id: scrollview        do_scroll_x: False        bar_width: self.width/40        size_hint: (1, None)        height: root.height - header.height        pos_hint: {'center_x': .5, 'y': 0}        StackLayout:            orientation: 'lr-tb'            size_hint: (1, None)            pos_hint: {'center_x': .5}            top: header.y            height: self.minimum_height            RelativeLayout:                id: threshold_type                size_hint: (1, None)                button_layout: button_layout                Label:                    id: title                    size_hint: (None, None)                    size: self.texture_size                    pos_hint: {'x': .02, 'top': 1}                    font_size: app.FONT_SIZE                    text: 'Type'                    halign: 'center'                    valign: 'center'                    font_name: app.FONT                BoxLayout:                    id: button_layout                    orientation: 'horizontal'                    size_hint: (None, None)                    height: 1.5*app.FONT_SIZE                    width: 2*max(manual_threshold.width, otsu_threshold.width)                    pos_hint: {'center_x': .5}                    y: title.y - self.height                    padding: .075*self.height                    spacing: .05*self.height                    RoundedToggleButton:                        id: manual_threshold                        group: 'threshold_type'                        text: 'Manual'                        state: 'down'                        width: max(manual_threshold.width, otsu_threshold.width)                    RoundedToggleButton:                        id: otsu_threshold                        group: 'threshold_type'                        text: 'Otsu'                        width: max(manual_threshold.width, otsu_threshold.width)            Separator:            SliderBlock:                id: threshold                title: "Threshold"                height: 100                value: root.threshold                disabled: root.otsu_enabled            <AdapThreshScreen>:    filter_type: 'gaussian' if gaussian_kernel.state == 'down' else 'box'    block_size: block_size.value    c_size: c_size.value    on_filter_type:        app.root.kivycam.settings["AdapThreshold"]["filter_type"] = self.filter_type    on_block_size:        app.root.kivycam.settings["AdapThreshold"]["block_size"] = self.block_size    on_c_size:        app.root.kivycam.settings["AdapThreshold"]["c_size"] = self.c_size    Header:        id: header        title: "Adaptive Threshold"    ScrollView:        id: scrollview        do_scroll_x: False        bar_width: self.width/40        size_hint: (1, None)        height: root.height - header.height        pos_hint: {'center_x': .5, 'y': 0}        StackLayout:            orientation: 'lr-tb'            size_hint: (1, None)            pos_hint: {'center_x': .5}            top: header.y            height: self.minimum_height            RelativeLayout:                id: filter_type                size_hint: (1, None)                button_layout: button_layout                Label:                    id: title                    size_hint: (None, None)                    size: self.texture_size                    pos_hint: {'x': .02, 'top': 1}                    font_size: app.FONT_SIZE                    text: 'Kernel type'                    halign: 'center'                    valign: 'center'                    font_name: app.FONT                BoxLayout:                    id: button_layout                    orientation: 'horizontal'                    size_hint: (None, None)                    height: box_kernel.height                    width: 2*max(box_kernel.width, gaussian_kernel.width)                    pos_hint: {'center_x': .5}                    y: title.y - self.height                    RoundedToggleButton:                        id: box_kernel                        group: 'adapthresh_type'                        text: 'Box'                        state: 'down'                        width: max(box_kernel.width, gaussian_kernel.width)                    RoundedToggleButton:                        id: gaussian_kernel                        group: 'adapthresh_type'                        text: 'Gaussian'                        width: max(box_kernel.width, gaussian_kernel.width)            Separator:            SliderBlock:                id: block_size                title: "Block Size"                height: 100                min: 3                max: 99                step: 2            Separator:            SliderBlock:                id: c_size                title: "Mean offset"                height: 100                min: -50                max: 50            <BlurScreen>:    kernel_size: kernel_size.value    on_kernel_size:        app.root.kivycam.settings["Blur"]["kernel_size"] = self.kernel_size    Header:        id: header        title: "Blur"    ScrollView:        id: scrollview        do_scroll_x: False        bar_width: self.width/40        size_hint: (1, None)        height: root.height - header.height        pos_hint: {'center_x': .5, 'y': 0}        StackLayout:            orientation: 'lr-tb'            size_hint: (1, None)            pos_hint: {'center_x': .5}            top: header.y            height: self.minimum_height            SliderBlock:                id: kernel_size                title: "kernel"                height: 100                min: 1                max: 100            <OpticalFlowScreen>:    window_size: window_size.value    min_speed_threshold: min_speed_threshold.value    on_window_size:        app.root.kivycam.settings["OpticalFlow"]["window_size"] = self.window_size    on_min_speed_threshold:        app.root.kivycam.settings["OpticalFlow"]["min_speed_threshold"] = self.min_speed_threshold    Header:        id: header        title: "Optical Flow"    ScrollView:        id: scrollview        do_scroll_x: False        bar_width: self.width/40        size_hint: (1, None)        height: root.height - header.height        pos_hint: {'center_x': .5, 'y': 0}        StackLayout:            orientation: 'lr-tb'            size_hint: (1, None)            pos_hint: {'center_x': .5}            top: header.y            height: self.minimum_height            SliderBlock:                id: window_size                title: "Window size"                height: 100                min: 1                max: 99                step: 2                value: root.window_size            Separator:            SliderBlock:                id: min_speed_threshold                title: "Minimum speed threshold"                height: 100                min: 0                max: 10                value: root.min_speed_threshold<ConvolutionScreen>:    scale_factor: scale_factor.value    on_scale_factor:        app.root.kivycam.settings["Convolution"]["scale_factor"] = self.scale_factor    Header:        id: header        title: "Convolution"    ScrollView:        id: scrollview        do_scroll_x: False        bar_width: self.width/40        size_hint: (1, None)        height: root.height - header.height        pos_hint: {'center_x': .5, 'y': 0}        StackLayout:            orientation: 'lr-tb'            size_hint: (1, None)            pos_hint: {'center_x': .5}            top: header.y            height: self.minimum_height            RelativeLayout:                id: filter_type                size_hint: (1, None)                Label:                    id: title                    size_hint: (None, None)                    size: self.texture_size                    pos_hint: {'x': .02, 'top': 1}                    font_size: app.FONT_SIZE                    text: 'Kernel'                    halign: 'center'                    valign: 'center'                    font_name: app.FONT                Spinner:                    id: kernel_button                    text: 'Sobel (left)'                    font_size: app.FONT_SIZE                    size_hint: (None, None)                    size: 1.5*self.texture_size[0], 1.5*self.texture_size[1]                    pos_hint: {'center_x': .5}                    y: title.y - self.height                    values: 'Identity', 'Sobel (left)', 'Sobel (right)', 'Sobel (up)', 'Sobel (down)', 'Blur', 'Outline', 'Sharpen'                    on_text:                         app.root.kivycam.settings["Convolution"]["kernel"] = self.text            SliderBlock:                id: scale_factor                title: "Resolution"                min: 1                max: 25                value: root.scale_factor